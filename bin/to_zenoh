#!/usr/bin/env python3

"""
to_zenoh
Read from stdin and publish to a zenoh session.
"""

import sys
import json
import logging
import argparse
import warnings

import zenoh
import parse

logger = logging.getLogger("to_zenoh")

publisher_config = {
    "priority": zenoh.Priority.REAL_TIME(),
    "congestion_control": zenoh.CongestionControl.DROP(),
}


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="to_zenoh",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "--mode",
        "-m",
        dest="mode",
        choices=["peer", "client"],
        type=str,
        help="The zenoh session mode.",
    )
    parser.add_argument(
        "--connect",
        "-e",
        dest="connect",
        metavar="ENDPOINT",
        action="append",
        type=str,
        help="Endpoints to connect to.",
    )
    parser.add_argument(
        "--config",
        "-c",
        dest="config",
        metavar="FILE",
        type=str,
        help="A configuration file.",
    )
    parser.add_argument(
        "--username", dest="username", type=str, help="Username to use when connecting."
    )
    parser.add_argument(
        "--password", dest="password", type=str, help="Password to use when connecting."
    )
    parser.add_argument("--log-level", type=int, default=logging.WARNING)

    args = parser.parse_args()
    conf = (
        zenoh.Config.from_file(args.config)
        if args.config is not None
        else zenoh.Config()
    )
    if args.mode is not None:
        conf.insert_json5(zenoh.config.MODE_KEY, json.dumps(args.mode))
    if args.connect is not None:
        conf.insert_json5(zenoh.config.CONNECT_KEY, json.dumps(args.connect))
    if args.username is not None:
        conf.insert_json5("transport/auth/usrpwd/user", json.dumps(args.username))
    if args.password is not None:
        conf.insert_json5("transport/auth/usrpwd/password", json.dumps(args.password))

    # Setup logger
    logging.basicConfig(
        format="%(asctime)s %(levelname)s %(name)s %(message)s", level=args.log_level
    )
    logging.captureWarnings(True)
    warnings.filterwarnings("once")

    # initiate logging
    zenoh.init_logger()

    logger.info("Opening Zenoh session...")
    session = zenoh.open(conf)

    PATTERN = parse.compile("{key_expr} {payload}")

    logger.info("Listening on stdin...")

    ## Processing loop
    for line in sys.stdin:
        if not (res := PATTERN.parse(line)):
            logging.error(
                "Line %s did not look as expected: '<key_expr> <payload>'",
                line,
            )
            continue

        session.put(res["key_expr"], res["payload"])
